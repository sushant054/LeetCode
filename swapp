// Definition for singly-linked list.
class ListNode {
    int val;
    ListNode next;
    ListNode() {}
    ListNode(int val) { this.val = val; }
    ListNode(int val, ListNode next) { this.val = val; this.next = next; }
}

class Solution {
    public ListNode swapPairs(ListNode head) {
        // Creating a dummy node
        ListNode dummy = new ListNode(0);
        dummy.next = head;

        ListNode point = dummy;

        while (point.next != null && point.next.next != null) {
            ListNode swap1 = point.next;
            ListNode swap2 = point.next.next;
            // Swapping
            swap1.next = swap2.next;
            swap2.next = swap1;
            point.next = swap2;
            point = swap1;
        }
        return dummy.next;
    }

    // Utility method to print the list
    public static void printList(ListNode head) {
        ListNode current = head;
        while (current != null) {
            System.out.print(current.val + " ");
            current = current.next;
        }
        System.out.println();
    }

    // Utility method to create a list from an array
    public static ListNode createList(int[] values) {
        if (values.length == 0) return null;
        ListNode head = new ListNode(values[0]);
        ListNode current = head;
        for (int i = 1; i < values.length; i++) {
            current.next = new ListNode(values[i]);
            current = current.next;
        }
        return head;
    }

    public static void main(String[] args) {
        // Test case: Input list [1, 2, 3, 4]
        int[] values = {1, 2, 3, 4};
        ListNode head = createList(values);

        // Swap nodes in pairs
        Solution solution = new Solution();
        ListNode result = solution.swapPairs(head);

        // Print the swapped list
        printList(result);
    }
}
